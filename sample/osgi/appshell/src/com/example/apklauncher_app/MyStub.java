package com.example.apklauncher_app;

import org.bbs.apklauncher.ApkLauncherConfig;
import org.bbs.apklauncher.ApkPackageManager;
import org.bbs.apklauncher.PackageManagerProxy;
import org.bbs.apklauncher.ReflectUtil;
import org.bbs.apklauncher.TargetInstrumentation;
import org.bbs.apklauncher.emb.Host_Application;
import org.bbs.apklauncher.emb.auto_gen.Stub_Activity;
import org.bbs.apklauncher.emb.auto_gen.Target_Activity;
import org.bbs.apklauncher.osgi.bundlemanager.FrameworkHelper;
import org.osgi.framework.Bundle;

import android.app.Application;
import android.content.Intent;
import android.text.TextUtils;
import android.util.Log;

public class MyStub extends Stub_Activity {
	private static final String TAG = MyStub.class.getSimpleName();
	// XXX 
	public static long mBundleId = 0;

	@Override
	protected void onPrepareActivityStub() {
		Intent intent = getIntent();
		// TODO is there a way to update ClassLoader before parse intent?
		//intent.getExtras().setClassLoader(loader);
		
		String hostActivityClassName = intent.getStringExtra(EXTRA_HOST_COMPONENT_CLASS_NAME);
		// get target activity info
		String targetActivityClassName = intent.getStringExtra(EXTRA_TARGET_COMPONENT_CLASS_NAME);
		mTargetActivityInfo = ApkPackageManager.getInstance()
												.getActivityInfo(targetActivityClassName);
		String libPath = mTargetActivityInfo.mPackageInfo.applicationInfo.nativeLibraryDir;
		String targetApplicationClassName = mTargetActivityInfo.applicationInfo.className;
		int targetThemeId = mTargetActivityInfo.theme;
		String apkPath = mTargetActivityInfo.applicationInfo.publicSourceDir;
//do NOT edit this file, auto-generated by host_target.groovy from Target_Activity.java.template
		if (TextUtils.isEmpty(targetApplicationClassName)){
			targetApplicationClassName = Application.class.getCanonicalName();
			Log.i(TAG, "no packageName, user default:" + targetApplicationClassName);
		}
		String targetPackageName = mTargetActivityInfo.packageName;

		if (ApkLauncherConfig.debug()) {
			Log.d(TAG, "stub activity              : " + Stub_Activity.class.getName());
			Log.d(TAG, "host activity              : " + hostActivityClassName);
			Log.d(TAG, "targetActivityClassName    : " + targetActivityClassName);
			Log.d(TAG, "targetThemeId              : " + targetThemeId);
			Log.d(TAG, "targetApkPath              : " + apkPath);
			Log.d(TAG, "targetLibPath              : " + libPath);
			Log.d(TAG, "targetApplicationClassName : " + targetApplicationClassName);
			Log.d(TAG, "targetPackageName          : " + targetPackageName);
		}
		
		Bundle targetBundle = FrameworkHelper.getInstance(null).getFramework().getBundleContext().getBundle(mBundleId);
		try {
			Object o = targetBundle.loadClass("com.example.apklauncher_app_osgi_felix_t_3.TestA").newInstance();
			Log.d(TAG, " cl: " + o.getClass().getClassLoader());
			mTargetActivity = (Target_Activity)(targetBundle.loadClass(targetActivityClassName).newInstance());
			mTargetClassLoader = mTargetActivity.getClass().getClassLoader();
			Log.d(TAG, "mTargetClassLoader: " + mTargetClassLoader);
			// do application init. must before activity init.
			Application targetApp = ((Host_Application)getApplication())
									.onPrepareApplictionStub(mTargetActivityInfo.applicationInfo, 
															 mTargetClassLoader, 
															 mHostSysPm);
			
			// do activity init
			TargetInstrumentation.injectInstrumentation(this, this);
			mTargetResourceMerger = ApkPackageManager.getTargetResource(apkPath, mHostBaseContext);

			targetThemeId = ReflectUtil.ResourceUtil
											.selectDefaultTheme(mTargetResourceMerger, 
																targetThemeId, 
															 	mTargetActivityInfo.applicationInfo.targetSdkVersion);

			Log.d(TAG, "resolved activity theme: " + targetThemeId);
			mTargetContext.setTheme(targetThemeId);
			mTargetContext.themeReady(targetThemeId);
			mTargetContext.resReady(mTargetResourceMerger);
			mTargetContext.applicationContextReady(targetApp);
			mTargetContext.packageManagerReady(new PackageManagerProxy(mHostSysPm));
			mTargetContext.packageNameReady(targetPackageName);
			
			ReflectUtil.ActivityReflectUtil.setActivityApplication(this, targetApp);

			setHostActivity(mTargetActivity, this);
			ReflectUtil.ActivityReflectUtil.attachBaseContext(mTargetActivity, this);
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}
